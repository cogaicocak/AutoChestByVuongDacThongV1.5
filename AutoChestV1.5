-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Configuration
local CONFIG = {
    DELAY_BETWEEN_TPS = 1.25,
    MIN_CHESTS = 7,
    MAX_CHESTS = 10,
    HEIGHT_OFFSET = 3,
    DELAY_AFTER_RESET = 1,
    JUMP_POWER = 50,
    JUMP_COUNT = 2
}

-- Variables for chest counter
local chestVisitCount = 0
local currentResetTarget = math.random(CONFIG.MIN_CHESTS, CONFIG.MAX_CHESTS)
local currentChestCFrame = nil
local isLocked = false

local function createGui()
    local gui = Instance.new("ScreenGui")
    gui.Name = "C"..tostring(math.random(1000, 9999))
    gui.IgnoreGuiInset = true
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.DisplayOrder = 999999
    gui.ResetOnSpawn = false
    gui.Parent = player.PlayerGui
    
    -- Background frame full screen
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Parent = gui
    background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    background.BackgroundTransparency = 0.7
    background.Size = UDim2.new(1, 0, 1, 0)
    background.Position = UDim2.new(0, 0, 0, 0)
    background.BorderSizePixel = 0
    
    -- Container for centered content
    local container = Instance.new("Frame")
    container.Name = "Container"
    container.Parent = background
    container.Size = UDim2.new(0, 400, 0, 150) -- Fixed size container
    container.Position = UDim2.new(0.5, 0, 0.5, 0) -- Center of screen
    container.AnchorPoint = Vector2.new(0.5, 0.5) -- Center anchor point
    container.BackgroundTransparency = 1
    
    -- Main text
    local mainText = Instance.new("TextLabel")
    mainText.Name = "MainText"
    mainText.Parent = container
    mainText.Size = UDim2.new(1, 0, 0.5, 0) -- Take full container width
    mainText.Position = UDim2.new(0, 0, 0, 0)
    mainText.BackgroundTransparency = 1
    mainText.Text = "Auto Farm Chest"
    mainText.TextColor3 = Color3.fromRGB(255, 255, 255)
    mainText.TextSize = 48
    mainText.Font = Enum.Font.GothamBold
    mainText.AnchorPoint = Vector2.new(0, 0)
    
    -- Credit text
    local creditText = Instance.new("TextLabel")
    creditText.Name = "CreditText"
    creditText.Parent = container
    creditText.Size = UDim2.new(1, 0, 0.3, 0) -- Take full container width
    creditText.Position = UDim2.new(0, 0, 0.6, 0) -- Position below main text
    creditText.BackgroundTransparency = 1
    creditText.Text = "made by VuongDacThong"
    creditText.TextColor3 = Color3.fromRGB(200, 200, 200)
    creditText.TextSize = 24
    creditText.Font = Enum.Font.Gotham
    creditText.AnchorPoint = Vector2.new(0, 0)
    
    -- Add gradient effect to background
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(20, 20, 20)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    })
    gradient.Parent = background
    
    -- Add corner radius to background
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = background
    
    -- Animation for gradient
    local tweenService = game:GetService("TweenService")
    local tweenInfo = TweenInfo.new(
        5, -- Time
        Enum.EasingStyle.Linear, -- Easing Style
        Enum.EasingDirection.InOut, -- Easing Direction
        -1, -- Repeat Count (-1 means infinite)
        true -- Reverses
    )
    
    local tween = tweenService:Create(gradient, tweenInfo, {
        Rotation = 360
    })
    tween:Play()
    
    -- Thêm hiệu ứng fade in
    background.BackgroundTransparency = 1
    mainText.TextTransparency = 1
    creditText.TextTransparency = 1
    
    local fadeInfo = TweenInfo.new(
        1, -- Time
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    
    tweenService:Create(background, fadeInfo, {BackgroundTransparency = 0.7}):Play()
    tweenService:Create(mainText, fadeInfo, {TextTransparency = 0}):Play()
    tweenService:Create(creditText, fadeInfo, {TextTransparency = 0}):Play()
    
    return gui, mainText
end

-- Check for chest
local function isChest(model)
    return typeof(model) == "Instance" and 
           model:IsA("Model") and 
           string.find(model.Name:lower(), "chest")
end

-- Reset character function
local function resetCharacter()
    if player.Character then
        local humanoid = player.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.Health = 0
        else
            player.Character:BreakJoints()
        end
    end
end

-- Position lock function
local function startPositionLock()
    if isLocked then return end
    isLocked = true
    
    -- Disconnect existing connection if any
    if _G.positionLockConnection then
        _G.positionLockConnection:Disconnect()
    end
    
    -- Create new connection
    _G.positionLockConnection = RunService.Heartbeat:Connect(function()
        if humanoidRootPart and currentChestCFrame and isLocked then
            humanoidRootPart.CFrame = currentChestCFrame
            
            -- Lock velocity
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
        end
    end)
end

-- Stop position lock
local function stopPositionLock()
    isLocked = false
    if _G.positionLockConnection then
        _G.positionLockConnection:Disconnect()
        _G.positionLockConnection = nil
    end
end

-- Force jump function
local function forceJump()
    if humanoid and humanoid.Health > 0 then
        -- Enable jumping if disabled
        if not humanoid.UseJumpPower then
            humanoid.UseJumpPower = true
        end
        
        -- Set jump power
        humanoid.JumpPower = CONFIG.JUMP_POWER
        
        -- Force jump
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        task.wait(0.1)
        humanoid.Jump = true
        task.wait(0.2)
    end
end

-- Direct teleport function with jump mechanism
local function teleportToChest(chest)
    local chestPart = chest:FindFirstChild("HumanoidRootPart") or 
                      chest:FindFirstChild("Hitbox") or 
                      chest.PrimaryPart or 
                      chest:FindFirstChildWhichIsA("BasePart")
    
    if chestPart and humanoidRootPart then
        -- Set new chest position
        currentChestCFrame = chestPart.CFrame * CFrame.new(0, CONFIG.HEIGHT_OFFSET, 0)
        
        -- Instant teleport
        humanoidRootPart.CFrame = currentChestCFrame
        
        -- Multiple jumps at the current location
        for i = 1, CONFIG.JUMP_COUNT do
            forceJump()
        end
        
        -- Update chest counter
        chestVisitCount = chestVisitCount + 1
        
        -- Check for reset condition
        if chestVisitCount >= currentResetTarget then
            print(string.format("Collected %d chests, resetting...", currentResetTarget))
            chestVisitCount = 0
            currentResetTarget = math.random(CONFIG.MIN_CHESTS, CONFIG.MAX_CHESTS)
            print(string.format("Next reset will be after %d chests", currentResetTarget))
            
            -- Stop position lock before reset
            stopPositionLock()
            task.wait(0.5)
            resetCharacter()
            
            -- Wait for new character
            player.CharacterAdded:Wait()
            task.wait(CONFIG.DELAY_AFTER_RESET)
            humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
            humanoid = player.Character:WaitForChild("Humanoid")
        end
        
        task.wait(CONFIG.DELAY_BETWEEN_TPS)
        return true
    end
    return false
end

-- Main collection loop
local function collectChestsContinuously()
    local gui, label = createGui()
    
    while true do
        local chestFolder = workspace:FindFirstChild("ChestModels")
        
        if chestFolder then
            local chests = {}
            for _, model in ipairs(chestFolder:GetChildren()) do
                if isChest(model) then
                    table.insert(chests, model)
                end
            end
            
            if #chests > 0 then
                -- Start position lock at the beginning of chest collection
                startPositionLock()
                
                for i, chest in ipairs(chests) do
                    print(string.format("Teleporting to Chest %d/%d: %s (Count %d/%d)", 
                        i, #chests, chest.Name, chestVisitCount + 1, currentResetTarget))
                    
                    if not teleportToChest(chest) then
                        warn("Failed to teleport to:", chest.Name)
                    end
                end
                
                -- Stop position lock after collecting all chests
                stopPositionLock()
                print("All chests collected, position unlocked!")
                
                -- Add small delay after collecting all chests
                task.wait(0.1)
            else
                warn("No chests found in ChestModels!")
                -- Add longer delay when no chests found
                task.wait(1)
            end
        else
            warn("ChestModels folder not found!")
            task.wait(1)
        end
    end
end

-- Handle character respawning
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    -- Reset position lock state
    isLocked = false
    currentChestCFrame = nil
end)

-- Cleanup on script stop
game:GetService("Players").LocalPlayer.CharacterRemoving:Connect(function()
    stopPositionLock()
end)

-- Start the script
if humanoidRootPart and humanoid then
    print(string.format("Starting auto chest, will reset after %d chests", currentResetTarget))
    task.spawn(collectChestsContinuously)
else
    warn("Required character parts not found!")
end
